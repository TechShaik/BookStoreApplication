spring.application.name=BookStoreGateway

server.port=8089

# Eureka Configuration
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/

# Gateway Routes
spring.cloud.gateway.routes[0].id=book-services
spring.cloud.gateway.routes[0].uri=lb://BOOK-SERVICES
spring.cloud.gateway.routes[0].predicates[0]=Path=/books/**
spring.cloud.gateway.routes[0].filters[0]=AuthenticationFilter
spring.cloud.gateway.routes[0].filters[1].name=CircuitBreaker
spring.cloud.gateway.routes[0].filters[1].args.name=book-services
spring.cloud.gateway.routes[0].filters[1].args.fallbackuri=forward:/bookFallBack

spring.cloud.gateway.routes[1].id=user-services
spring.cloud.gateway.routes[1].uri=lb://USER-SERVICES
spring.cloud.gateway.routes[1].predicates[0]=Path=/users/**
spring.cloud.gateway.routes[1].filters[0]=AuthenticationFilter
spring.cloud.gateway.routes[0].filters[1].name=CircuitBreaker
spring.cloud.gateway.routes[0].filters[1].args.name=user-services
spring.cloud.gateway.routes[0].filters[1].args.fallbackuri=forward:/userFallBack


spring.cloud.gateway.routes[2].id=cart-services
spring.cloud.gateway.routes[2].uri=lb://CART-SERVICES
spring.cloud.gateway.routes[2].predicates[0]=Path=/cart/**
spring.cloud.gateway.routes[2].filters[0]=AuthenticationFilter
spring.cloud.gateway.routes[0].filters[1].name=CircuitBreaker
spring.cloud.gateway.routes[0].filters[1].args.name=cart-services
spring.cloud.gateway.routes[0].filters[1].args.fallbackuri=forward:cartFallBack


spring.cloud.gateway.routes[3].id=order-services
spring.cloud.gateway.routes[3].uri=lb://ORDER-SERVICES
spring.cloud.gateway.routes[3].predicates[0]=Path=/order/**
spring.cloud.gateway.routes[3].filters[0]=AuthenticationFilter
spring.cloud.gateway.routes[0].filters[1].name=CircuitBreaker
spring.cloud.gateway.routes[0].filters[1].args.name=order-services
spring.cloud.gateway.routes[0].filters[1].args.fallbackuri=forward:/orderFallBack

# Logging Configuration
logging.level.org.springframework.cloud.gateway=INFO
logging.level.org.springframework.cloud.gateway.route.RouteDefinitionLocator=INFO
logging.level.org.springframework.cloud.gateway=TRACE
logging.level.org.springframework.cloud.gateway.support.WeightCalculatorFilter=WARN

spring.cloud.discovery.enabled=true
spring.cloud.loadbalancer.enabled=true

# Actuator Configuration
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true
 

# Resilience4j Configuration
resilience4j.circuitbreaker.instances.companyBreaker.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.companyBreaker.slidingWindowSize=10
resilience4j.circuitbreaker.instances.companyBreaker.minimumNumberOfCalls=3
resilience4j.circuitbreaker.instances.companyBreaker.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.companyBreaker.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.companyBreaker.failureRateThreshold=50
resilience4j.circuitbreaker.instances.companyBreaker.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.companyBreaker.sliding-window-type=count_based

#rete limiter
resilience4j.ratelimiter.instances.companyBreaker.timeout=0
resilience4j.ratelimiter.instances.companyBreaker.limit-refresh-periods=4
resilience4j.ratelimiter.instances.companyBreaker.limit-for-periods=2

#retry
resilience4j.circuitbreaker.instances.companyBreaker.max-attempts=5
resilience4j.circuitbreaker.instances.companyBreaker.wait-duration=2s
